Skeleton
Existen varios para slim
Traen una 'estructura'.

A partir de esto vamos a poder hacer aplicaciones muy rapido

-Tenemos carpetas:
1) Config: configuraciones de las rutas, middlewares, BBDD (bootstrap es lo primero que levanta)
(*)aca usamos las config de slim, y lo retornamos
Implementamos tambien iluminate.

2) public: Aca iniciara la aplicacion
(*)aca en index. html (require ./bootstrap)->run(); // y con esto lo corro desde index

pero lo configuro en config/bootstrap

3)src: Aca van controllers, Middlewares, Models, Utils(cosas utiles como JWT)

************** IMP :
Las cosas que instalamos a traves de composer simplemente la usamos con Use Slim\...
no hace require_once ./..../;

Para poder hacer esto mismo lo que creo(los modelos, controllers,), en composer.json pego: 
    "autoload":{
        "classmap": [
            "src/Models" //-------> lo que quiero guardar
        ]

Luego en clase alumno.php(por ejemplo) le agrego namespace App\Models
luego en consola: composer dump-autoload

OTRA FORMA: ESTE ES EL STANDARD
en lugar de "classmap"
    "autoload":{
        "psr-4": [
            "App\\": "src", -------> lo que quiero guardar
	    "Config\\":"config"
        ]

y en consola: composer dumpautoload-o


En los modelos no hacemos nada, solo las tablas
Manejamos todo en el controller





**************************	MIDDLEWARE	**************************
Son manejadores de routes

TODO LO QUE HAGA EN middlewares.php SE EJECUTA EN TODOO
LO QUE HAGA EN routes.php Solo afecta a esa ruta


****SI QUIERO RECHAZAR POR EJEMPLO UNA PETICION QUE NO PASO LA VALIDACION DE TOKEN

en: public function __invoke(Request $req, Response $response){

en lugar de write($existingContent); hago una nueva ruta y le envio esa:
$response = new Response();
write("Acceso denegado");
}


*********************	MANEJADOR ERRORES	*********************
LOS PUSO EN EL MIDDLEWARE

